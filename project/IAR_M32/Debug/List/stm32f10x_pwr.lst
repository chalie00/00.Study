###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     29/Jun/2022  17:06:15 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\TTT\Desktop\zz.STDFW\00.Study\Libraries\STM32F1 #
#                    0x_StdPeriph_Driver\src\stm32f10x_pwr.c                  #
#    Command line =  C:\Users\TTT\Desktop\zz.STDFW\00.Study\Libraries\STM32F1 #
#                    0x_StdPeriph_Driver\src\stm32f10x_pwr.c -D               #
#                    USE_STDPERIPH_DRIVER -D STM32F10x_HD -D USE_FULL_ASSERT  #
#                    -lcN C:\Users\TTT\Desktop\zz.STDFW\00.Study\project\IAR_ #
#                    M32\Debug\List\ -lb C:\Users\TTT\Desktop\zz.STDFW\00.Stu #
#                    dy\project\IAR_M32\Debug\List\ -o                        #
#                    C:\Users\TTT\Desktop\zz.STDFW\00.Study\project\IAR_M32\D #
#                    ebug\Obj\ --no_cse --no_unroll --no_inline               #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\Users\TTT\Desktop\zz.STDFW\00.Study\project\I #
#                    AR_M32\..\..\inc\ -I C:\Users\TTT\Desktop\zz.STDFW\00.St #
#                    udy\project\IAR_M32\..\..\Libraries\CMSIS\CM3\DeviceSupp #
#                    ort\ST\STM32F10x\ -I C:\Users\TTT\Desktop\zz.STDFW\00.St #
#                    udy\project\IAR_M32\..\..\Libraries\STM32F10x_StdPeriph_ #
#                    Driver\inc\ -I "C:\Program Files (x86)\IAR               #
#                    Systems\Embedded Workbench 6.0\arm\inc\c\" -On -I        #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\TTT\Desktop\zz.STDFW\00.Study\project\IAR_M32\D #
#                    ebug\List\stm32f10x_pwr.lst                              #
#    Object file  =  C:\Users\TTT\Desktop\zz.STDFW\00.Study\project\IAR_M32\D #
#                    ebug\Obj\stm32f10x_pwr.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\TTT\Desktop\zz.STDFW\00.Study\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_pwr.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_pwr.c
      4            * @author  MCD Application Team
      5            * @version V3.4.0
      6            * @date    10/15/2010
      7            * @brief   This file provides all the PWR firmware functions.
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm32f10x_pwr.h"
     23          #include "stm32f10x_rcc.h"
     24          
     25          /** @addtogroup STM32F10x_StdPeriph_Driver
     26            * @{
     27            */
     28          
     29          /** @defgroup PWR 
     30            * @brief PWR driver modules
     31            * @{
     32            */ 
     33          
     34          /** @defgroup PWR_Private_TypesDefinitions
     35            * @{
     36            */
     37          
     38          /**
     39            * @}
     40            */
     41          
     42          /** @defgroup PWR_Private_Defines
     43            * @{
     44            */
     45          
     46          /* --------- PWR registers bit address in the alias region ---------- */
     47          #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
     48          
     49          /* --- CR Register ---*/
     50          
     51          /* Alias word address of DBP bit */
     52          #define CR_OFFSET                (PWR_OFFSET + 0x00)
     53          #define DBP_BitNumber            0x08
     54          #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
     55          
     56          /* Alias word address of PVDE bit */
     57          #define PVDE_BitNumber           0x04
     58          #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
     59          
     60          /* --- CSR Register ---*/
     61          
     62          /* Alias word address of EWUP bit */
     63          #define CSR_OFFSET               (PWR_OFFSET + 0x04)
     64          #define EWUP_BitNumber           0x08
     65          #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
     66          
     67          /* ------------------ PWR registers bit mask ------------------------ */
     68          
     69          /* CR register bit mask */
     70          #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
     71          #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
     72          
     73          
     74          /**
     75            * @}
     76            */
     77          
     78          /** @defgroup PWR_Private_Macros
     79            * @{
     80            */
     81          
     82          /**
     83            * @}
     84            */
     85          
     86          /** @defgroup PWR_Private_Variables
     87            * @{
     88            */
     89          
     90          /**
     91            * @}
     92            */
     93          
     94          /** @defgroup PWR_Private_FunctionPrototypes
     95            * @{
     96            */
     97          
     98          /**
     99            * @}
    100            */
    101          
    102          /** @defgroup PWR_Private_Functions
    103            * @{
    104            */
    105          
    106          /**
    107            * @brief  Deinitializes the PWR peripheral registers to their default reset values.
    108            * @param  None
    109            * @retval None
    110            */
    111          void PWR_DeInit(void)
    112          {
    113            RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
    114            RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
    115          }
    116          
    117          /**
    118            * @brief  Enables or disables access to the RTC and backup registers.
    119            * @param  NewState: new state of the access to the RTC and backup registers.
    120            *   This parameter can be: ENABLE or DISABLE.
    121            * @retval None
    122            */
    123          void PWR_BackupAccessCmd(FunctionalState NewState)
    124          {
    125            /* Check the parameters */
    126            assert_param(IS_FUNCTIONAL_STATE(NewState));
    127            *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
    128          }
    129          
    130          /**
    131            * @brief  Enables or disables the Power Voltage Detector(PVD).
    132            * @param  NewState: new state of the PVD.
    133            *   This parameter can be: ENABLE or DISABLE.
    134            * @retval None
    135            */
    136          void PWR_PVDCmd(FunctionalState NewState)
    137          {
    138            /* Check the parameters */
    139            assert_param(IS_FUNCTIONAL_STATE(NewState));
    140            *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
    141          }
    142          
    143          /**
    144            * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
    145            * @param  PWR_PVDLevel: specifies the PVD detection level
    146            *   This parameter can be one of the following values:
    147            *     @arg PWR_PVDLevel_2V2: PVD detection level set to 2.2V
    148            *     @arg PWR_PVDLevel_2V3: PVD detection level set to 2.3V
    149            *     @arg PWR_PVDLevel_2V4: PVD detection level set to 2.4V
    150            *     @arg PWR_PVDLevel_2V5: PVD detection level set to 2.5V
    151            *     @arg PWR_PVDLevel_2V6: PVD detection level set to 2.6V
    152            *     @arg PWR_PVDLevel_2V7: PVD detection level set to 2.7V
    153            *     @arg PWR_PVDLevel_2V8: PVD detection level set to 2.8V
    154            *     @arg PWR_PVDLevel_2V9: PVD detection level set to 2.9V
    155            * @retval None
    156            */
    157          void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
    158          {
    159            uint32_t tmpreg = 0;
    160            /* Check the parameters */
    161            assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
    162            tmpreg = PWR->CR;
    163            /* Clear PLS[7:5] bits */
    164            tmpreg &= CR_PLS_MASK;
    165            /* Set PLS[7:5] bits according to PWR_PVDLevel value */
    166            tmpreg |= PWR_PVDLevel;
    167            /* Store the new value */
    168            PWR->CR = tmpreg;
    169          }
    170          
    171          /**
    172            * @brief  Enables or disables the WakeUp Pin functionality.
    173            * @param  NewState: new state of the WakeUp Pin functionality.
    174            *   This parameter can be: ENABLE or DISABLE.
    175            * @retval None
    176            */
    177          void PWR_WakeUpPinCmd(FunctionalState NewState)
    178          {
    179            /* Check the parameters */
    180            assert_param(IS_FUNCTIONAL_STATE(NewState));
    181            *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
    182          }
    183          
    184          /**
    185            * @brief  Enters STOP mode.
    186            * @param  PWR_Regulator: specifies the regulator state in STOP mode.
    187            *   This parameter can be one of the following values:
    188            *     @arg PWR_Regulator_ON: STOP mode with regulator ON
    189            *     @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
    190            * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
    191            *   This parameter can be one of the following values:
    192            *     @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
    193            *     @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
    194            * @retval None
    195            */
    196          void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
    197          {
    198            uint32_t tmpreg = 0;
    199            /* Check the parameters */
    200            assert_param(IS_PWR_REGULATOR(PWR_Regulator));
    201            assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
    202            
    203            /* Select the regulator state in STOP mode ---------------------------------*/
    204            tmpreg = PWR->CR;
    205            /* Clear PDDS and LPDS bits */
    206            tmpreg &= CR_DS_MASK;
    207            /* Set LPDS bit according to PWR_Regulator value */
    208            tmpreg |= PWR_Regulator;
    209            /* Store the new value */
    210            PWR->CR = tmpreg;
    211            /* Set SLEEPDEEP bit of Cortex System Control Register */
    212            SCB->SCR |= SCB_SCR_SLEEPDEEP;
    213            
    214            /* Select STOP mode entry --------------------------------------------------*/
    215            if(PWR_STOPEntry == PWR_STOPEntry_WFI)
    216            {   
    217              /* Request Wait For Interrupt */
    218              __WFI();
    219            }
    220            else
    221            {
    222              /* Request Wait For Event */
    223              __WFE();
    224            }
    225            
    226            /* Reset SLEEPDEEP bit of Cortex System Control Register */
    227            SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
    228          }
    229          
    230          /**
    231            * @brief  Enters STANDBY mode.
    232            * @param  None
    233            * @retval None
    234            */
    235          void PWR_EnterSTANDBYMode(void)
    236          {
    237            /* Clear Wake-up flag */
    238            PWR->CR |= PWR_CR_CWUF;
    239            /* Select STANDBY mode */
    240            PWR->CR |= PWR_CR_PDDS;
    241            /* Set SLEEPDEEP bit of Cortex System Control Register */
    242            SCB->SCR |= SCB_SCR_SLEEPDEEP;
    243          /* This option is used to ensure that store operations are completed */
    244          #if defined ( __CC_ARM   )
    245            __force_stores();
    246          #endif
    247            /* Request Wait For Interrupt */
    248            __WFI();
    249          }
    250          
    251          /**
    252            * @brief  Checks whether the specified PWR flag is set or not.
    253            * @param  PWR_FLAG: specifies the flag to check.
    254            *   This parameter can be one of the following values:
    255            *     @arg PWR_FLAG_WU: Wake Up flag
    256            *     @arg PWR_FLAG_SB: StandBy flag
    257            *     @arg PWR_FLAG_PVDO: PVD Output
    258            * @retval The new state of PWR_FLAG (SET or RESET).
    259            */
    260          FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
    261          {
    262            FlagStatus bitstatus = RESET;
    263            /* Check the parameters */
    264            assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
    265            
    266            if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
    267            {
    268              bitstatus = SET;
    269            }
    270            else
    271            {
    272              bitstatus = RESET;
    273            }
    274            /* Return the flag status */
    275            return bitstatus;
    276          }
    277          
    278          /**
    279            * @brief  Clears the PWR's pending flags.
    280            * @param  PWR_FLAG: specifies the flag to clear.
    281            *   This parameter can be one of the following values:
    282            *     @arg PWR_FLAG_WU: Wake Up flag
    283            *     @arg PWR_FLAG_SB: StandBy flag
    284            * @retval None
    285            */
    286          void PWR_ClearFlag(uint32_t PWR_FLAG)
    287          {
    288            /* Check the parameters */
    289            assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
    290                   
    291            PWR->CR |=  PWR_FLAG << 2;
    292          }
    293          
    294          /**
    295            * @}
    296            */
    297          
    298          /**
    299            * @}
    300            */
    301          
    302          /**
    303            * @}
    304            */
    305          
    306          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  PWR_BackupAccessCmd
              8 -> assert_failed
        8  PWR_ClearFlag
              8 -> assert_failed
        8  PWR_DeInit
              8 -> RCC_APB1PeriphResetCmd
        0  PWR_EnterSTANDBYMode
       16  PWR_EnterSTOPMode
             16 -> assert_failed
       16  PWR_GetFlagStatus
             16 -> assert_failed
        8  PWR_PVDCmd
              8 -> assert_failed
       16  PWR_PVDLevelConfig
             16 -> assert_failed
        8  PWR_WakeUpPinCmd
              8 -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      96  ?<Constant "C:\\Users\\TTT\\Desktop\\...">
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
      32  PWR_BackupAccessCmd
      36  PWR_ClearFlag
      24  PWR_DeInit
      40  PWR_EnterSTANDBYMode
      98  PWR_EnterSTOPMode
      52  PWR_GetFlagStatus
      32  PWR_PVDCmd
      64  PWR_PVDLevelConfig
      32  PWR_WakeUpPinCmd

 
  96 bytes in section .rodata
 438 bytes in section .text
 
 438 bytes of CODE  memory
  96 bytes of CONST memory

Errors: none
Warnings: none
